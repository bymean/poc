{"version":3,"sources":["components/molecules/grid/HIRAGrid.jsx","components/templates/layout/layout.jsx","components/templates/layout/footer.jsx","pages/sampleGrid.jsx","pages/sampleGrid2.jsx","components/molecules/form/SearchForm.jsx","pages/sampleBoard.jsx","Routes.js","App.js","serviceWorker.js","index.js"],"names":["HIRAGrid","props","useState","isSpinLoading","minHeight","onSetGrid","useEffect","spinning","tip","className","style","ReactDataGrid","headerRowHeight","ref","defaultProps","GlobalLayout","children","Footer","Form","create","form","defaultColumnProperties","resizable","gridData","setGridData","gridLoading","setGridLoading","isStart","setIsStart","collapsed","setCollapsed","getFieldDecorator","formItemLayout","Menu","SubMenu","labelCol","span","wrapperCol","colon","OneItemLayout","handleLoading","isLoading","axiosConfig","headers","columns","key","name","width","map","c","getList","a","keyword","undefined","err","wookList","getFieldsValue","params","gubun","prsStatCd","searchEno","axios","post","then","res","catch","error","console","log","alert","resultList","data","viewDetail","listDtl","eno","regSno","setFieldsValue","insertDtl","param","ftusTpCd","cncrDd","admtDd","aplDd","wlfrAplPrgStatCd","txtReqWork","chbirSpplPaymYn","chbirEptDd","chgChcrRsRsTxt","rnRsTxt","resultStat","Sider","trigger","collapsible","href","class","theme","mode","defaultSelectedKeys","Item","to","type","Header","onClick","Content","gutter","xs","md","label","rules","required","message","defaultValue","placeholder","Option","value","Search","onSearch","htmlType","isClass","rows","rowsCount","length","onRowClick","rowIdx","e","enableCellAutoFocus","emptyRowsView","textAlign","paddingTop","GRID_HEIGHT","color","onGridSort","sortColumn","sortDirection","initialRows","sort","b","sortRows","Group","TextArea","autoSize","initialValue","today","Date","date","getFullYear","getMonth","getDate","txtTheme","setTransForm","searchBtnClick","isTransCheck","setIsTransCheck","onPressEnter","setgubun","status","setstatus","username","setusername","no","setNo","relNm","setRelNm","famNm","setFamNm","aplTpNm","setAplTpNm","delDd","setDelDd","typeCode","setTypeCode","grd","setGrd","natNm","setNatNm","styAllowNm","setStyAllowNm","regDt","setRegDt","aplDt","setAplDt","styDt","setStyDt","prgStatNm","setPrgStatNm","setData","dataMap","onChange","target","searchForm","Input","formatter","cell","row","parmKeyword","searchParam","exact","path","component","sampleGrid2","sampleBoard","sampleGrid","App","Routes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qeAgBMA,EAAW,SAAAC,GAAS,MAEkBC,oBAAS,GAF3B,mBAEjBC,EAFiB,KAGhBC,GAHgB,KAGSH,EAAzBG,WAAWC,EAAcJ,EAAdI,UAWnB,OARAC,qBAAU,cAMP,IAGD,oCACE,kBAAC,IAAD,CAAMC,SAAUJ,EAAeK,IAAI,cACjC,yBAAKC,UAAU,oBAAoBC,MAAO,CAAEN,UAAU,GAAD,OAAKD,EAAa,UAAMC,EAAN,MAAsB,SAE9FO,KACC,kBAAC,IAAD,eACEC,gBAAiB,GACjBC,IAAK,SAAAA,GACCR,GACFA,EAAUQ,KAGVZ,MAYdD,EAASc,aAAe,CACtBV,UAAW,KACXC,UAAW,MAGEL,QC7CAe,EAZM,SAAAd,GAAU,IACrBe,EAAaf,EAAbe,SAER,OACE,oCACE,kBAAC,IAAD,KACGA,KCoBMC,EAXA,WAEb,OACE,oCACE,kBAAC,IAAOA,OAAR,CAAeR,UAAU,UAAzB,uDCmlBUS,G,OAAAA,IAAKC,QAALD,EA1lBG,SAAC,GAAY,IAAXE,EAAU,EAAVA,KAIbC,EAA0B,CAC9BC,WAAW,GALgB,EASGpB,mBAAS,IATZ,mBAStBqB,EATsB,KASZC,EATY,OAWStB,oBAAS,GAXlB,mBAWtBuB,EAXsB,KAWTC,EAXS,OAaCxB,oBAAS,GAbV,mBAatByB,EAbsB,KAabC,EAba,OAeK1B,oBAAS,GAfd,mBAetB2B,EAfsB,KAeXC,EAfW,KAmBrBC,EAAsBX,EAAtBW,kBAEFC,GADcC,IAAZC,QACe,CACrBC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,OAAO,IAEHC,EAAgB,CACpBJ,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAwEhBI,EAAgB,SAAAC,GACpBf,EAAee,IAIXC,EAAc,CAClBC,QAAS,CACP,eAAgB,qDAUdC,EAAU,CACd,CAAEC,IAAK,KAAMC,KAAM,KAAMC,MAAM,IAC/B,CAAEF,IAAK,UAAWC,KAAM,2BAAQC,MAAM,KACtC,CAAEF,IAAK,QAASC,KAAM,2BAAQC,MAAM,KACpC,CAAEF,IAAK,SAAUC,KAAM,2BAAQC,MAAM,KACrC,CAAEF,IAAK,SAAUC,KAAM,2BAAQC,MAAM,KACrC,CAAEF,IAAK,iBAAkBC,KAAM,+CAAaC,MAAM,KAClD,CAAEF,IAAK,aAAcC,KAAM,2BAAQC,MAAM,MACzCC,KAAI,SAAAC,GAAC,sBAAUA,EAAV,GAAgB5B,MAQjB6B,EAAO,uCAAG,oCAAAC,EAAA,+DAEZX,GAAc,GAWI,GAElB,IAKQY,QApBI,GAoBJA,aACqBC,IAAZD,EAAyB,GAAKA,EAE/C,MAAME,IAvBM,OA0BNC,EAAUnC,EAAKoC,iBACfC,EAAS,SAASF,EAASG,MAAM,cAAcH,EAASI,UAAU,cAAcJ,EAASK,UA3BnF,SA6BQC,IAAMC,KAAK,sBAAuBL,EAAQf,GAE7DqB,MAAK,SAAAC,GAAG,OAAIA,KACZC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,GACZG,MAAMH,MAlCI,QA6BNF,EA7BM,UAsCHM,EAAcN,EAAIO,KAAlBD,WAiBP9C,EAda8C,GAgBb1C,GAAW,IAzDD,kDA6DZuC,QAAQC,IAAR,MA7DY,yBAgEZ5B,GAAc,GAhEF,6EAAH,qDAiGblC,qBAAU,cAEP,IAEH,IAAMkE,EAAU,uCAAG,WAAOC,GAAP,mBAAAtB,EAAA,6DAEjBX,GAAc,GAERiB,EAAU,OAAOgB,EAAQC,IAAI,WAAWD,EAAQE,OAJrC,SAQCd,IAAMC,KAAK,qBAAqBL,EAAQf,GARzC,QAQXsB,EARW,UAWPM,EAAeN,EAAIO,KAAnBD,WAIRlD,EAAKwD,eAAeN,GAEpB9B,GAAc,GACd2B,QAAQC,IAAI,iBAAkBE,IAlBf,2CAAH,sDAoDVO,EAAS,uCAAG,kCAAA1B,EAAA,6DAChBX,GAAc,GAERiB,EAAUrC,EAAKoC,iBAEfsB,EAAO,uBAAuBrB,EAAOkB,OAAO,aAAalB,EAAOsB,SAAS,WAAWtB,EAAOuB,OAAO,YAAYvB,EAAOwB,OAAO,UAAUxB,EAAOyB,MAAM,qBAAqBzB,EAAO0B,iBAAiB,eAAe1B,EAAO2B,WAAW,oBAAoB3B,EAAO4B,gBAAgB,eAAe5B,EAAO6B,WAAW,mBAAmB7B,EAAO8B,eAAe,YAAY9B,EAAO+B,QAL/V,SAOE3B,IAAMC,KAAK,yBAAyBgB,EAAOpC,GAP7C,QAOVsB,EAPU,UAUNyB,EAAezB,EAAIO,KAAnBkB,WAEJpB,MAAM,8CAENnB,IAIJV,GAAc,GACd2B,QAAQC,IAAI,iBAAkBqB,IAnBhB,2CAAH,qDAwBf,OACE,kBAAC,EAAD,KACE,kBAAC,IAAOC,MAAR,CAAcjF,UAAU,QAAQkF,QAAS,KAAMC,aAAW,EAAC/D,UAAWA,GACpE,wBAAIpB,UAAU,QACZ,uBAAGoF,KAAK,KAAI,gCAAQ,8CAEtB,wBAAIC,MAAM,WAAV,kCACA,kBAAC,IAAD,CAAMrF,UAAU,OAAOsF,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACtE,kBAAC,IAAKC,KAAN,CAAWrD,IAAI,KACb,kBAAC,IAAD,CAAMsD,GAAG,gBACP,kBAAC,IAAD,CAAMC,KAAK,SACX,sDAGJ,kBAAC,IAAKF,KAAN,CAAWrD,IAAI,KACb,kBAAC,IAAD,CAAMsD,GAAG,eACP,kBAAC,IAAD,CAAMC,KAAK,iBACX,2FAGJ,kBAAC,IAAKF,KAAN,CAAWrD,IAAI,KACb,kBAAC,IAAD,CAAMsD,GAAG,gBACP,kBAAC,IAAD,CAAMC,KAAK,iBACX,0EAKR,kBAAC,IAAD,KACE,kBAAC,IAAOC,OAAR,CAAeP,MAAM,UACnB,kBAAC,IAAD,CACErF,UAAU,UACV2F,KAAMvE,EAAY,cAAgB,OAElCyE,QAtHK,WACbxE,GAAcD,MAuHR,yBAAKpB,UAAU,qCACb,iKAGJ,kBAAC,IAAO8F,QAAR,CAAgB9F,UAAU,YACxB,kBAAC,IAAD,iBAAUuB,EAAV,CAA0BvB,UAAU,sBAClC,kBAAC,IAAD,CAAK+F,OAAQ,GAAIJ,KAAK,QACpB,kBAAC,IAAD,CAAKK,GAAI,IACP,kBAAC,IAAD,CAAKD,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,QAAS,CAC1B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CACEgF,aAAa,GACbC,YAAY,gBAEZ,kBAAC,IAAOC,OAAR,CAAeC,MAAM,IAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,KAArB,4BACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,KAArB,gCAKN,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,YAAa,CAC9B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CACEgF,aAAa,GACbC,YAAY,gBAEZ,kBAAC,IAAOC,OAAR,CAAeC,MAAM,IAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,MAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,MAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,MAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,MAArB,oBAKR,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,iBAAelE,EAAf,CAA+B2E,MAAM,iBAClC5E,EAAkB,YAAa,CAC9B6E,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,MAJd/E,CAQC,kBAAC,IAAD,CAAKyE,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,IACP,kBAAC,IAAMU,OAAP,CAEEJ,aAAa,GACbK,SAAU,SAAAF,GAAK,OAAI/C,QAAQC,IAAI8C,OAGnC,kBAAC,IAAD,CAAKT,GAAI,IACP,kBAAC,IAAD,CAAOM,aAAa,YAQpC,kBAAC,IAAD,CAAKN,GAAI,EAAGhG,UAAU,cACpB,kBAAC,IAAD,CAAQ2F,KAAK,UAAUiB,SAAS,SAAS5G,UAAU,OAAO6F,QAASpD,GAAnE,mBAON,oGACA,kBAAC,IAAD,CAAM3C,UAAU,EAAO+G,SAAS,GAChC,kBAAC,EAAD,CACE1E,QAASA,EACT2E,KAAMhG,EAENiG,UAAWjG,EAASkG,OACpBrH,UA7aU,IA8aVsH,WA7Va,SAACC,GACtB,IACEnD,EAAWjD,EAASoG,IAQtB,MAAMC,MAoVEC,qBAAqB,EACrBC,cAAenG,EA7YD,WACtB,OACE,yBAAKjB,MAAO,CAAEqH,UAAW,SAAUC,WAAYC,MAC7C,kBAAC,IAAD,CAAM1H,SAAUkB,EAAa6F,SAAS,GACnC,OAOa,WACpB,OACE,yBAAK5G,MAAO,CAAEqH,UAAW,SAAUC,WAAYC,MAC7C,yBAAKxH,UAAU,8BACb,yBAAKA,UAAU,oBAGf,uBAAGA,UAAU,wBAAwBC,MAAO,CAACwH,MAAM,SAAnD,cA4XEC,WAAY,SAACC,EAAYC,GAAb,OAA+B7G,EApXpC,SAAC8G,EAAaF,EAAYC,GAA1B,OAA4C,SAAAd,GAC3D,IAYE,MAAyB,SAAlBc,EAA2BC,EAAc,YAAIf,GAAMgB,MAXzC,SAACpF,EAAGqF,GACnB,MAAsB,QAAlBH,EACKlF,EAAEiF,GAAcI,EAAEJ,GAAc,GAAK,EAGxB,SAAlBC,EACKlF,EAAEiF,GAAcI,EAAEJ,GAAc,GAAK,EAGvC,KAGT,MAAO9E,MAsWsDmF,CAASlH,EAAU6G,EAAYC,QAGxF,wBAAI5H,UAAU,SAAd,2DACA,kBAAC,IAAD,iBAAUuB,EAAV,CAA0BvB,UAAU,cAClC,kBAAC,IAAD,CAAK+F,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,WAAY,CAC7B6E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,MADpC/E,CAGC,kBAAC,IAAD,CACEgF,aAAa,GACbC,YAAY,gBAEZ,kBAAC,IAAOC,OAAR,CAAeC,MAAM,IAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,KAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,KAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,KAArB,oBAOR,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,QAAS,CAC1B6E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,MADpC/E,CAIC,kBAAC,IAAD,CAAOgF,aAAa,QAI1B,kBAAC,IAAD,CAAKN,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,mBAAoB,CACrC6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CACEgF,aAAa,IACbC,YAAY,gBAEZ,kBAAC,IAAOC,OAAR,CAAeC,MAAM,IAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,MAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,MAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,MAArB,gBACA,kBAAC,IAAOD,OAAR,CAAeC,MAAM,MAArB,oBAKR,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,SAAU,CAC3B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAIC,kBAAC,IAAD,CAAOgF,aAAa,QAI1B,kBAAC,IAAD,CAAKN,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,SAAU,CAC3B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAIC,kBAAC,IAAD,CAAOgF,aAAa,QAI1B,kBAAC,IAAD,CAAKN,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,WAAY,CAC7B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAM2G,MAAP,KACE,kBAAC,IAAD,CAAOxB,MAAM,KAAb,sBACA,kBAAC,IAAD,CAAOA,MAAM,KAAb,0BAKR,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,IACf,kBAAC,IAAKR,KAAN,eAAWS,MAAM,uEA3eT,CACpBxE,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MA0eLL,EAAkB,kBAAmB,CACpC6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAM2G,MAAP,KACE,kBAAC,IAAD,CAAOxB,MAAM,KAAb,KACA,kBAAC,IAAD,CAAOA,MAAM,KAAb,SAKR,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,kCACd5E,EAAkB,aAAc,CAC/B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAIC,kBAAC,IAAD,CAAOgF,aAAa,QAI1B,kBAAC,IAAD,CAAKN,GAAI,IACP,kBAAC,IAAKP,KAAN,eAAWS,MAAM,gDAAgBpE,EAAjC,CAAgD9B,UAAU,aACvDsB,EAAkB,iBAAkB,CACnC6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAM4G,SAAP,CAAgB3B,YAAY,2FAAqB4B,UAAQ,OAI/D,kBAAC,IAAD,CAAKnC,GAAI,IACP,kBAAC,IAAKP,KAAN,eAAWS,MAAM,4BAAWpE,EAA5B,CAA2C9B,UAAU,aAClDsB,EAAkB,UAAW,CAC5B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAM4G,SAAP,CAAgB3B,YAAY,uEAAgB4B,UAAQ,OAqB1D,kBAAC,IAAD,CAAKnC,GAAI,GAAIhG,UAAU,mCACvB,kBAAC,IAAKyF,KAAN,KAAYnE,EAAkB,SAAU,CAAE8G,aAAc,IAA5C9G,CAAkD,kBAAC,IAAD,CAAOqE,KAAK,aAC1E,kBAAC,IAAKF,KAAN,KAAYnE,EAAkB,MAAO,CAAE8G,aAAc,IAAzC9G,CAA+C,kBAAC,IAAD,CAAOqE,KAAK,aACrE,kBAAC,IAAD,CAAQA,KAAK,UAAUiB,SAAS,UAAhC,4BAGA,kBAAC,IAAD,CAAQA,SAAS,SAASf,QA7TxB,WACd,IAAIwC,EAAQ,IAAIC,KAChBC,EAAOF,EAAMG,cAAe,IAAOH,EAAMI,WAAa,EAAK,GAAK,KAAMJ,EAAMI,WAAa,GAAMJ,EAAMI,WAAa,GAAUJ,EAAMK,UAElI/H,EAAKwD,eAAe,CAACG,SAAmB,GACxCC,OAAmB,GACnBE,MAAmB8D,EACnB7D,iBAAmB,GACnBC,WAAmB,GACnBH,OAAmB,GACnBmE,SAAmB,GACnB/D,gBAAmB,GACnBC,WAAmB,GACnBC,eAAmB,GACnBC,QAAmB,GACnBb,OAAmB,GACnBD,IAAmB,OA6SP,gBAGA,kBAAC,IAAD,CAAQ0B,KAAK,SAASiB,SAAS,UAA/B,gBAGA,kBAAC,IAAD,CAAQjB,KAAK,UAAUiB,SAAS,SAAUf,QAASzB,GAAnD,oBAOR,kBAAC,EAAD,YCzBQ3D,GChhBDA,IAAKC,QAALD,EAtDI,SAAC,GAA4C,IAA1CE,EAAyC,EAAzCA,KAAMiI,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,eAChCvH,EAAsBX,EAAtBW,kBADqD,EAErB7B,oBAAS,GAFY,mBAEtDqJ,EAFsD,KAExCC,EAFwC,KAIvDxH,EAAiB,CACrBG,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,OAAO,GAUT,OAPAhC,qBAAU,WACJiJ,IACFF,EAAajI,GACboI,GAAgB,MAEjB,CAACD,EAAcF,IAGhB,kBAAC,IAAD,iBAAUrH,EAAV,CAA0BvB,UAAU,sBAClC,kBAAC,IAAD,CAAK+F,OAAQ,GAAIJ,KAAK,QACpB,kBAAC,IAAD,CAAKK,GAAI,IACP,kBAAC,IAAD,CAAKD,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,KAET,kBAAC,IAAD,CAAKA,GAAI,EAAGhG,UAAU,cACpB,kBAAC,IAAKyF,KAAN,iBAAelE,EAAf,CAA+B2E,MAAM,iBAClC5E,EAAkB,UAAW,CAC5B6E,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,MAJd/E,CAQC,kBAAC,IAAD,CACEgF,aAAc,GACdG,MAAO,GACPuC,aAAcH,OAKtB,kBAAC,IAAD,CAAK7C,GAAI,EAAGhG,UAAU,cACpB,kBAAC,IAAD,CAAQ2F,KAAK,UAAUiB,SAAS,SAAS5G,UAAU,OAAO6F,QAASgD,GAAnE,wBD2hBEpI,IAAKC,QAALD,EA3jBI,SAAC,GAAY,IAAXE,EAAU,EAAVA,KAEZW,EAAsBX,EAAtBW,kBAFsB,EAKC7B,mBAAS,IALV,mBAKxBqB,EALwB,KAKdC,EALc,OAOOtB,oBAAS,GAPhB,mBAOxBuB,EAPwB,KAOXC,EAPW,OASDxB,oBAAS,GATR,mBASxByB,EATwB,KASfC,EATe,OAWG1B,oBAAS,GAXZ,mBAWxB2B,EAXwB,KAWbC,EAXa,OAYK5B,mBAAS,IAZd,gCAaLA,mBAAS,KAbJ,mBAaxBwD,EAbwB,KAajBgG,EAbiB,OAcHxJ,mBAAS,IAdN,mBAcxByJ,EAdwB,KAchBC,EAdgB,OAeC1J,mBAAS,IAfV,mBAexB2J,EAfwB,KAedC,EAfc,QAiBX5J,mBAAS,IAjBE,qBAiBxB6J,GAjBwB,MAiBpBC,GAjBoB,SAkBL9J,mBAAS,IAlBJ,qBAkBxB+J,GAlBwB,MAkBjBC,GAlBiB,SAmBLhK,mBAAS,IAnBJ,qBAmBxBiK,GAnBwB,MAmBjBC,GAnBiB,SAoBDlK,mBAAS,IApBR,qBAoBxBmK,GApBwB,MAoBfC,GApBe,SAqBLpK,mBAAS,IArBJ,qBAqBxBqK,GArBwB,MAqBjBC,GArBiB,SAsBCtK,mBAAS,IAtBV,qBAsBxBuK,GAtBwB,MAsBdC,GAtBc,SAuBTxK,mBAAS,IAvBA,qBAuBxByK,GAvBwB,MAuBnBC,GAvBmB,SAwBL1K,mBAAS,IAxBJ,qBAwBxB2K,GAxBwB,MAwBjBC,GAxBiB,SAyBK5K,mBAAS,IAzBd,qBAyBxB6K,GAzBwB,MAyBZC,GAzBY,SA0BL9K,mBAAS,IA1BJ,qBA0BxB+K,GA1BwB,MA0BjBC,GA1BiB,SA2BLhL,mBAAS,IA3BJ,qBA2BxBiL,GA3BwB,MA2BjBC,GA3BiB,SA4BLlL,mBAAS,IA5BJ,qBA4BxBmL,GA5BwB,MA4BjBC,GA5BiB,SA6BGpL,mBAAS,IA7BZ,qBA6BxBqL,GA7BwB,MA6BbC,GA7Ba,MAkCxBxJ,IADcC,IAAZC,QACe,CACrBC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,OAAO,IAYHjB,GAA0B,CAC9BC,WAAW,GASPoB,GAAc,CAClBC,QAAS,IAuDLC,GAAU,CACd,CAAEC,IAAK,KAAMC,KAAM,KAAMC,MAAM,IAC/B,CAAEF,IAAK,QAASC,KAAM,eAAMC,MAAM,KAClC,CAAEF,IAAK,QAASC,KAAM,2BAASC,MAAM,KACrC,CAAEF,IAAK,QAASC,KAAM,mCAAYC,MAAM,KACxC,CAAEF,IAAK,WAAYC,KAAM,2BAASC,MAAM,KACxC,CAAEF,IAAK,MAAOC,KAAM,eAAMC,MAAM,KAChC,CAAEF,IAAK,QAASC,KAAM,qBAAQC,MAAM,KACpC,CAAEF,IAAK,QAASC,KAAM,eAAQC,MAAM,KACpC,CAAEF,IAAK,aAAcC,KAAM,2BAASC,MAAM,KAC1C,CAAEF,IAAK,QAASC,KAAM,2BAAQC,MAAM,KACpC,CAAEF,IAAK,QAASC,KAAM,2BAAQC,MAAM,KACpC,CAAEF,IAAK,YAAaC,KAAM,2BAAQC,MAAM,MACtCC,KAAI,SAAAC,GAAC,sBAAUA,EAAV,GAAgB5B,OAqCzBf,qBAAU,cAEP,IAEL,IAUMiH,GAAO,CAAC,CAACwC,GAAK,GAAIE,MAAQ,GAAIE,MAAO,GAAIE,QAAS,GAAIE,MAAO,GAAIE,SAAU,GAAIE,IAAK,GAAIE,MAAO,GAAIE,WAAY,GAAIM,MAAO,GAAIE,UAAU,GAAIN,MAAO,GAAIE,MAAO,KAmB5JjI,GAAO,uCAAG,kCAAAC,EAAA,+DAEZX,IAAc,GAGI,GAElB,IAKQY,QAZI,GAYJA,aACqBC,IAAZD,EAAyB,GAAKA,EAE/C,MAAME,IAfM,OAoBNG,EAAS,SAASC,EAAM,WAAWiG,EAAO,aAAaE,EApBjD,SAsBMhG,IAAMC,KAAK,wCAAyCL,EAAQf,IAC7EqB,MAAK,SAAAC,GAAG,OAAIA,KACZC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,MAzBF,QAsBNF,EAtBM,UA6BHM,EAAcN,EAAIO,KAAlBD,WAGP9C,EAFa8C,GAGb1C,GAAW,IAjCD,kDAoCZuC,QAAQC,IAAR,MApCY,yBAuCZ5B,IAAc,GAvCF,6EAAH,qDA4CPiJ,GAAO,uCAAG,4BAAAtI,EAAA,sEAEZX,IAAc,GAERiB,EAAS,MAAMsG,GAAG,UAAUE,GAAM,UAAUE,GAAM,YAAYE,GAAQ,UAAUE,GAAM,aAAaE,GAAS,QAAQE,GAAI,UAAUM,GAAM,UAAUJ,GAAM,eAAeE,GAAW,UAAUM,GAAM,UAAUF,GAAM,cAAcI,GAJ1N,SAQM1H,IAAMC,KAAK,iBAAkBL,EAAQf,IACtDqB,MAAK,SAAAC,GAAG,OAAIA,KACXC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,MAXH,cAcZhB,KAdY,gDAiBZiB,QAAQC,IAAR,MAjBY,yBAoBZ5B,IAAc,GApBF,4EAAH,qDA2BPA,GAAgB,SAAAC,GACpBf,EAAee,IAIX+B,GAAU,uCAAG,WAAOkH,GAAP,SAAAvI,EAAA,sDACjBX,IAAc,GAEVkJ,IACFtK,EAAKwD,eAAe8G,GACpBlJ,IAAc,GAIbwH,GAAM0B,EAAQ3B,IACdG,GAASwB,EAAQzB,OACjBG,GAASsB,EAAQvB,OACjBG,GAAWoB,EAAQrB,SACnBG,GAASkB,EAAQnB,OACjBG,GAAYgB,EAAQjB,UACpBG,GAAOc,EAAQf,KACfG,GAASY,EAAQb,OACjBG,GAAcU,EAAQX,YACtBG,GAASQ,EAAQT,OACjBG,GAASM,EAAQP,OACjBG,GAASI,EAAQL,OACjBG,GAAaE,EAAQH,WACtBpH,QAAQC,IAAI,iBAAkBsH,IAtBf,2CAAH,sDA0BhB,OACE,kBAAC,EAAD,KACE,kBAAC,IAAOhG,MAAR,CAAcjF,UAAU,QAAQkF,QAAS,KAAMC,aAAW,EAAC/D,UAAWA,GACpE,wBAAIpB,UAAU,QACZ,uBAAGoF,KAAK,KAAI,gCAAQ,8CAEtB,wBAAIC,MAAM,WAAV,kCACA,kBAAC,IAAD,CAAMrF,UAAU,OAAOsF,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACtE,kBAAC,IAAKC,KAAN,CAAWrD,IAAI,KACb,kBAAC,IAAD,CAAMsD,GAAG,iBACP,kBAAC,IAAD,CAAMC,KAAK,SACX,gEAGJ,kBAAC,IAAKF,KAAN,CAAWrD,IAAI,KACb,kBAAC,IAAD,CAAMsD,GAAG,gBACP,kBAAC,IAAD,CAAMC,KAAK,iBACX,2FAGJ,kBAAC,IAAKF,KAAN,CAAWrD,IAAI,KACb,kBAAC,IAAD,CAAMsD,GAAG,iBACP,kBAAC,IAAD,CAAMC,KAAK,iBACX,0EAKR,kBAAC,IAAD,KACE,kBAAC,IAAOC,OAAR,CAAeP,MAAM,UACnB,kBAAC,IAAD,CACErF,UAAU,UACV2F,KAAMvE,EAAY,cAAgB,OAElCyE,QA7KK,WACbxE,GAAcD,MA8KR,yBAAKpB,UAAU,qCACb,iKAGJ,kBAAC,IAAO8F,QAAR,CAAgB9F,UAAU,YAExB,kBAAC,IAAD,iBAAUuB,GAAV,CAA0BvB,UAAU,sBAClC,kBAAC,IAAD,CAAK+F,OAAQ,GAAIJ,KAAK,QACpB,kBAAC,IAAD,CAAKK,GAAI,IACP,kBAAC,IAAD,CAAKD,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,QAAS,CAC1B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOqE,KAAK,QAAQtD,KAAK,QAAQoE,MAAOxD,EAAOiI,SAAU,SAAA/D,GAAC,OAAI8B,EAAS9B,EAAEgE,OAAO1E,aAcpF,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,SAAU,CAC3B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOqE,KAAK,SAAStD,KAAK,SAASoE,MAAOyC,EAAQgC,SAAU,SAAA/D,GAAC,OAAIgC,EAAUhC,EAAEgE,OAAO1E,aAc1F,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,iBAAelE,GAAf,CAA+B2E,MAAM,iBAClC5E,EAAkB,WAAY,CAC7B6E,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,MAJd/E,CAQC,kBAAC,IAAD,CAAKyE,OAAQ,IACT,kBAAC,IAAD,CAAOJ,KAAK,WAAWtD,KAAK,WAAWoE,MAAO2C,EAAU8B,SAAU,SAAA/D,GAAC,OAAIkC,EAAYlC,EAAEgE,OAAO1E,gBAO5G,kBAAC,IAAD,CAAKT,GAAI,EAAGhG,UAAU,cACpB,kBAAC,IAAD,CAAQ2F,KAAK,UAAUiB,SAAS,SAAS5G,UAAU,OAAO6F,QAASpD,IAAnE,mBAON,0GACA,kBAAC,EAAD,CACCN,QAASA,GACT2E,KAAMhG,EAENiG,UAAWjG,EAASkG,OACpBrH,UA7ZW,IA8ZXsH,WA5Tc,SAACC,GACtB,IAMEnD,GAAWjD,EAASoG,IAEtB,MAAMC,MAoTCC,qBAAqB,EACrBC,cAAenG,EA1PF,WACtB,OACE,yBAAKjB,MAAO,CAAEqH,UAAW,SAAUC,WAAYC,MAC7C,kBAAC,IAAD,CAAM1H,SAAUkB,EAAa6F,SAAS,GACnC,OA3Ge,WACpB,OACE,yBAAK5G,MAAO,CAAEqH,UAAW,SAAUC,WAAYC,MAC7C,yBAAKxH,UAAU,8BACb,yBAAKA,UAAU,oBAGf,uBAAGA,UAAU,wBAAwBC,MAAO,CAACwH,MAAM,SAAnD,8DA2VCC,WAAY,SAACC,EAAYC,GAAb,OAA+B7G,EAnVnC,SAAC8G,EAAaF,EAAYC,GAA1B,OAA4C,SAAAd,GAC3D,IAYE,MAAyB,SAAlBc,EAA2BC,EAAc,YAAIf,GAAMgB,MAXzC,SAACpF,EAAGqF,GACnB,MAAsB,QAAlBH,EACKlF,EAAEiF,GAAcI,EAAEJ,GAAc,GAAK,EAGxB,SAAlBC,EACKlF,EAAEiF,GAAcI,EAAEJ,GAAc,GAAK,EAGvC,KAGT,MAAO9E,MAqUqDmF,CAASlH,EAAU6G,EAAYC,OAGvF,wBAAI5H,UAAU,SAAd,iEACA,kBAAC,IAAD,iBAAUuB,GAAV,CAA0BvB,UAAU,cAClC,kBAAC,IAAD,CAAK+F,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,gBACd5E,EAAkB,QAAS,CAC1B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,QAAQtD,KAAK,QAAQoE,MAAO+C,GAAO0B,SAAU,SAAA/D,GAAC,OAAIsC,GAAStC,EAAEgE,OAAO1E,aAItG,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,QAAS,CAC1B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,QAAQtD,KAAK,QAAQoE,MAAOiD,GAAOwB,SAAU,SAAA/D,GAAC,OAAIwC,GAASxC,EAAEgE,OAAO1E,aAItG,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,UAAW,CAC5B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,UAAUtD,KAAK,UAAUoE,MAAOmD,GAASsB,SAAU,SAAA/D,GAAC,OAAI0C,GAAW1C,EAAEgE,OAAO1E,aAI9G,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,oCACd5E,EAAkB,QAAS,CAC1B6E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,MADpC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,QAAQtD,KAAK,QAAQoE,MAAOqD,GAAOoB,SAAU,SAAA/D,GAAC,OAAI4C,GAAS5C,EAAEgE,OAAO1E,aAItG,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,WAAY,CAC7B6E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,MADpC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,WAAWtD,KAAK,WAAWoE,MAAOuD,GAAUkB,SAAU,SAAA/D,GAAC,OAAI8C,GAAY9C,EAAEgE,OAAO1E,aAIlH,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,gBACd5E,EAAkB,MAAO,CACxB6E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,MADpC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,MAAMtD,KAAK,MAAMoE,MAAOyD,GAAKgB,SAAU,SAAA/D,GAAC,OAAIgD,GAAOhD,EAAEgE,OAAO1E,aAI9F,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,gBACd5E,EAAkB,QAAS,CAC1B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,QAAQtD,KAAK,QAAQoE,MAAO2D,GAAOc,SAAU,SAAA/D,GAAC,OAAIkD,GAASlD,EAAEgE,OAAO1E,aAItG,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,aAAc,CAC/B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,aAAatD,KAAK,aAAaoE,MAAO6D,GAAYY,SAAU,SAAA/D,GAAC,OAAIoD,GAAcpD,EAAEgE,OAAO1E,aAI1H,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,QAAS,CAC1B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,QAAQtD,KAAK,QAAQoE,MAAOmE,GAAOM,SAAU,SAAA/D,GAAC,OAAI0D,GAAS1D,EAAEgE,OAAO1E,aAItG,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,sBACd5E,EAAkB,QAAS,CAC1B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,QAAQtD,KAAK,QAAQoE,MAAO+D,GAAOU,SAAU,SAAA/D,GAAC,OAAIsD,GAAStD,EAAEgE,OAAO1E,aAItG,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,QAAS,CAC1B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,QAAQtD,KAAK,QAAQoE,MAAOiE,GAAOQ,SAAU,SAAA/D,GAAC,OAAIwD,GAASxD,EAAEgE,OAAO1E,aAItG,kBAAC,IAAD,CAAKT,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAKR,KAAN,CAAWS,MAAM,4BACd5E,EAAkB,YAAa,CAC9B6E,MAAO,CAAC,CAAEC,UAAU,EAAOC,QAAS,MADrC/E,CAGC,kBAAC,IAAD,CAAOgF,aAAa,GAAGX,KAAK,YAAYtD,KAAK,YAAYoE,MAAOqE,GAAWI,SAAU,SAAA/D,GAAC,OAAI4D,GAAa5D,EAAEgE,OAAO1E,aAkBtH,kBAAC,IAAD,CAAKT,GAAI,GAAIhG,UAAU,mCAIrB,kBAAC,IAAD,CAAQ4G,SAAS,SAASjB,KAAK,MAAME,QAnXpC,WACf9B,GAAW+C,GAAK,IAChByC,GAAM,IACNE,GAAS,IACTE,GAAS,IACTE,GAAW,IACXE,GAAS,IACTE,GAAY,IACZE,GAAO,IACPE,GAAS,IACTE,GAAc,IACdE,GAAS,IACTE,GAAS,IACTE,GAAS,IACTE,GAAa,MAqWC,gBAMA,kBAAC,IAAD,CAAQpF,KAAK,UAAUiB,SAAS,SAASf,QAASmF,IAAlD,oBAOR,kBAAC,EAAD,YE1KQvK,MAAKC,QAALD,EA5YI,SAAC,GAAY,IAAXE,EAAU,EAAVA,KAIdC,EAA0B,CAC9BC,WAAW,GALiB,EASEpB,mBAAS,IATX,mBASbsB,GATa,aAWQtB,oBAAS,GAXjB,mBAWVwB,GAXU,aAaAxB,oBAAS,GAbT,mBAad0B,GAbc,aAeI1B,oBAAS,GAfb,mBAevB2B,EAfuB,KAeZC,EAfY,OAgBM5B,mBAAS,IAhBf,mBAgBvB2L,EAhBuB,KAoCxBnJ,GApCwB,KAkBAtB,EAAtBW,kBACYE,IAAZC,QACa4J,IAAbnD,SAgBY,CAClBhG,QAAS,CACP,eAAgB,oCAkEdH,EAAgB,SAAAC,GACpBf,EAAee,IA0CXS,GAtCU,CACd,CACEL,IAAK,KACLC,KAAM,KACNiJ,UAAW,SAAAC,GACT,OAAO,uBAAGvL,UAAU,eAAb,UAA+BuL,EAAKC,IAAIlC,MAEjDhH,MAAM,KAER,CACEF,IAAK,QACLC,KAAM,QACNC,MAAM,GAER,CACEF,IAAK,QACLC,KAAM,eACNC,MAAO,OAET,CACEF,IAAK,QACLC,KAAM,sBACNiJ,UAAW,SAAAC,GACT,OAAO,uBAAGvL,UAAU,eAAb,UAA+BuL,EAAKC,IAAI9B,SAEjDpH,MAAM,KAER,CACEF,IAAK,QACLC,KAAM,2BACNiJ,UAAW,SAAAC,GACT,OAAO,uBAAGvL,UAAU,eAAb,UAA+BuL,EAAKC,IAAIhB,SAEjDlI,MAAM,MAERC,KAAI,SAAAC,GAAC,sBAAUA,EAAV,GAAgB5B,MAGV,uCAAG,oCAAA8B,EAAA,+DAEZX,GAAc,GAWV0J,EAAc,GAElB,IACML,IACFM,EAAcN,EAAWrI,kBAGrBJ,EAAY+I,EAAZ/I,QACN8I,OAA2B7I,IAAZD,EAAyB,GAAKA,EAE/C,MAAME,IAvBM,MA2BG,2EAA6E4I,EAAc,mBA3B9F,SA+BMrI,IAAMC,KAAK,yCAA0C,GAAIpB,GAE1EqB,MAAK,SAAAC,GAAG,OAAIA,KACZC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,MAnCF,QA+BNF,EA/BM,UAuCHM,EAAcN,EAAIO,KAAlBD,WAiBP9C,EAfa8C,GAiBb1C,GAAW,IA1DD,kDA8DZuC,QAAQC,IAAR,MA9DY,yBAiEZ5B,GAAc,GAjEF,6EAAH,sDA2Hb,OAJAlC,qBAAU,WACR4C,MACC,IAGD,kBAAC,EAAD,KACE,kBAAC,IAAOwC,MAAR,CAAcjF,UAAU,QAAQkF,QAAS,KAAMC,aAAW,EAAC/D,UAAWA,GACpE,wBAAIpB,UAAU,QACZ,uBAAGoF,KAAK,KAAI,gCAAQ,8CAEtB,wBAAIpF,UAAU,WAAd,kCACA,kBAAC,IAAD,CAAMA,UAAU,OAAOsF,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACtE,kBAAC,IAAKC,KAAN,CAAWrD,IAAI,KACb,kBAAC,IAAD,CAAMsD,GAAG,gBACP,kBAAC,IAAD,CAAMC,KAAK,SACX,gEAGJ,kBAAC,IAAKF,KAAN,CAAWrD,IAAI,KACb,kBAAC,IAAD,CAAMsD,GAAG,eACP,kBAAC,IAAD,CAAMC,KAAK,iBACX,2FAGJ,kBAAC,IAAKF,KAAN,CAAWrD,IAAI,KACb,kBAAC,IAAD,CAAMsD,GAAG,gBACP,kBAAC,IAAD,CAAMC,KAAK,iBACX,0EAqBR,kBAAC,IAAD,KACE,kBAAC,IAAOC,OAAR,CAAeP,MAAM,UACnB,kBAAC,IAAD,CACErF,UAAU,UACV2F,KAAMvE,EAAY,cAAgB,OAElCyE,QA1DK,WACbxE,GAAcD,MA2DR,yBAAKpB,UAAU,qCACb,iKAGJ,kBAAC,IAAO8F,QAAR,CAAgB9F,UAAU,YAC1B,6BAAK,6BAAK,6BAAK,6BAAK,6BACpB,6BAAK,6BAAK,6BAAK,6BAAK,6BACpB,6BAAK,6BAAK,6BAAK,6BAAK,6BACpB,6BAAK,6BAAK,6BAAK,6BAAK,6BACpB,6BAAK,6BAAK,6BAAK,6BAAK,6BACpB,6BAAK,6BAAK,6BAAK,6BAAK,6BACpB,6BAAK,6BAAK,6BAAK,6BAAK,6BACpB,6BAAK,6BAAK,8BAwDV,kBAAC,EAAD,WC7YO,oBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2L,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,eAAeC,UAAWE,IACtC,kBAAC,IAAD,CAAOH,KAAK,cAAcC,UAAWG,IACrC,kBAAC,IAAD,CAAOJ,KAAK,eAAeC,UAAWC,MCM3BG,G,4LARX,OACE,oCACE,kBAACC,EAAD,W,GAJUC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1J,MAAK,SAAA2J,GACJA,EAAaC,gBAEd1J,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM4C,c","file":"static/js/main.70c79fac.chunk.js","sourcesContent":["/**\r\n * 시스템명 :  표준 템플릿\r\n * 업무명 : -\r\n * 파일명 : HIRAGrid.jsx\r\n * @author 김우곤\r\n * @version 0.1\r\n * @since  2019.12.16\r\n * @description  표준 테이블 컴포넌트\r\n * 무한 스크롤 적용 시 세로 스크롤이 나오도록 테이블의 높이를 조정해야 함\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react'; // REACT 기본 및 USESTATE 선언부\r\nimport PropsType from 'prop-types';\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport { Spin } from 'antd';\r\n\r\nconst HIRAGrid = props => {\r\n  // 그리드 import 로딩바\r\n  const [isSpinLoading, setIsSpinLoading] = useState(false);\r\n  const { minHeight, onSetGrid } = props;\r\n\r\n  // lifecycle\r\n  useEffect(() => {\r\n    // if (process.browser) {\r\n    //   // eslint-disable-next-line global-require\r\n    //   ReactDataGrid = require('react-data-grid');\r\n    //   setIsSpinLoading(false);\r\n    // }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Spin spinning={isSpinLoading} tip=\"Loading...\">\r\n        <div className=\"ant-table-wrapper\" style={{ minHeight: `${isSpinLoading ? `${minHeight}px` : '0'}` }} />\r\n      </Spin>\r\n      {ReactDataGrid && (\r\n        <ReactDataGrid\r\n          headerRowHeight={44}\r\n          ref={ref => {\r\n            if (onSetGrid) {\r\n              onSetGrid(ref);\r\n            }\r\n          }}\r\n          {...props}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nHIRAGrid.propTypes = {\r\n  minHeight: PropsType.number,\r\n  onSetGrid: PropsType.func\r\n};\r\n\r\nHIRAGrid.defaultProps = {\r\n  minHeight: null,\r\n  onSetGrid: null\r\n};\r\n\r\nexport default HIRAGrid;\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst GlobalLayout = props => {\r\n  const { children } = props;\r\n\r\n  return (\r\n    <>\r\n      <Layout>\r\n        {children}\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GlobalLayout;\r\n","/**\r\n * 시스템명 : Tamplate Layout > Footer\r\n * 업무명 :\r\n * 파일명 : footer.js\r\n * 작성자 :  문병호\r\n * 작성일 :  2020.04.16\r\n *\r\n * 설  명 :  Tamplate Layout > Footer\r\n *---------------------------------------------------------------------------------------\r\n *  변경일     변경자  변경내역\r\n *---------------------------------------------------------------------------------------\r\n * 2020.04.16  문병호 최초 프로그램 작성\r\n *---------------------------------------------------------------------------------------\r\n */\r\n\r\nimport React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst Footer = () => {\r\n\r\n  return (\r\n    <>\r\n      <Layout.Footer className=\"footer\">\r\n      Copyright © 2020 Ubstory. All Rights Reserved.\r\n      </Layout.Footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, {useState, useEffect} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport axios from 'axios';\r\nimport { Layout, Row, Col, Menu, Icon, Form, Input, Select, Button, DatePicker, Radio, Upload, Spin, message } from 'antd';\r\nimport { MailOutlined } from '@ant-design/icons';\r\nimport HIRAGrid from '../components/molecules/grid/HIRAGrid';\r\n\r\nimport Wrapper from '../components/templates/layout/layout';\r\nimport Footer from '../components/templates/layout/footer';\r\n\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\nimport FormItem from 'antd/lib/form/FormItem';\r\n\r\n\r\nconst GridSample = ({form}) => {\r\n  let grid; /* 그리드 선언 */\r\n  const GRID_HEIGHT = 480; /* 그리드 높이 */\r\n  // 그리드 기본 프로퍼티스\r\n  const defaultColumnProperties = {\r\n    resizable: true\r\n  };\r\n\r\n  // 그리드 데이터 값\r\n  const [gridData, setGridData] = useState([]);\r\n  // 그리드 로딩\r\n  const [gridLoading, setGridLoading] = useState(false);\r\n  // 그리드 시작 여부 판단\r\n  const [isStart, setIsStart] = useState(false);\r\n\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  //const [searchForm, setSearchForm] = useState({}); /** 검색폼 */\r\n\r\n\r\n  const { getFieldDecorator } = form;\r\n  const { SubMenu } = Menu;\r\n  const formItemLayout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n    colon: false,\r\n  };\r\n  const OneItemLayout = {\r\n    labelCol: { span: 3 },\r\n    wrapperCol: { span: 21 },\r\n  };\r\n  const TwoItemLayout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 20 },\r\n  };\r\n\r\n  \r\n  // 그리드 로딩 view\r\n  const LoadingRowsView = () => {\r\n    return (\r\n      <div style={{ textAlign: 'center', paddingTop: GRID_HEIGHT / 2 - 40 }}>\r\n        <Spin spinning={gridLoading} isClass={false}>\r\n          {' '}\r\n        </Spin>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // 그리드 데이터 없음 view\r\n  const EmptyRowsView = () => {\r\n    return (\r\n      <div style={{ textAlign: 'center', paddingTop: GRID_HEIGHT / 2 - 70 }}>\r\n        <div className=\"ant-empty ant-empty-normal\">\r\n          <div className=\"ant-empty-image\">\r\n            {/* <img src=\"../resource/img/img_nodata.svg\" alt='no data' /> */}\r\n          </div>\r\n          <p className=\"ant-empty-description\" style={{color:'#fff'}}>no data</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // 그리드 정렬\r\n  // eslint-disable-next-line consistent-return\r\n  const sortRows = (initialRows, sortColumn, sortDirection) => rows => {\r\n    try {\r\n      const comparer = (a, b) => {\r\n        if (sortDirection === 'ASC') {\r\n          return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n        }\r\n\r\n        if (sortDirection === 'DESC') {\r\n          return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n        }\r\n\r\n        return 1;\r\n      };\r\n      return sortDirection === 'NONE' ? initialRows : [...rows].sort(comparer);\r\n    } catch (err) {\r\n      // sendError(constants.KSD_ERROR.EV, err);\r\n    }\r\n  };\r\n  \r\n  // 그리드 cell 선택 이벤트\r\n  const onCellSelected = (rowIdx) => {\r\n    try {\r\n      viewDetail(gridData[rowIdx]);\r\n      // const rows = document.getElementsByClassName('react-grid-Row');\r\n      // rows.forEach(e => e.classList.remove('table-row-selected'));\r\n      // rows[rowIdx].classList.add('table-row-selected');\r\n\r\n      // setSecnCd(trim(gridData[rowIdx].secnCd));\r\n      //viewDetail(gridData[rowIdx].B_IDX);\r\n    }\r\n    catch(e){\r\n\r\n    }\r\n  };\r\n\r\n\r\n  // 그리드 및 버튼 로딩 제어\r\n  const handleLoading = isLoading => {\r\n    setGridLoading(isLoading);\r\n    // setBtnSearchLoading(isLoading);\r\n  };\r\n\r\n  const axiosConfig = {\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\r\n    }\r\n  };\r\n  // 그리드 ref 세팅\r\n  const handleSetGrid = ref => {\r\n    if (!grid) {\r\n      grid = ref;\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    { key: 'rn', name: 'No', width:90 },\r\n    { key: 'aplTpNm', name: '신청구분', width:290 },\r\n    { key: 'aplDd', name: '신청일자', width:190 },\r\n    { key: 'cncrDd', name: '해지일자', width:190 },\r\n    { key: 'admtDd', name: '승인일자', width:190 },\r\n    { key: 'chgChcrRsRsTxt', name: '변경 및 해지사유', width:500 },\r\n    { key: 'sntnStatNm', name: '진행상태', width:190 }\r\n  ].map(c => ({ ...c, ...defaultColumnProperties }));\r\n  \r\n  // const rows = [\r\n  //   { id: 0, rn: \"3\", apl_tp_nm: \"출산장려금\", apl_dd: \"2020-04-13\", 4: \"2020-04-13\", 5: \"2019-10-01\", 6: \"-\", 7: \"진행중\" },\r\n  //   { id: 1, rn: \"2\", apl_tp_nm: \"출산장려금\", apl_dd: \"2020-04-04\", 4: \"2020-04-13\", 5: \"2019-10-01\", 6: \"\", 7: \"접수\" },\r\n  //   { id: 2, rn: \"1\", apl_tp_nm: \"출산장려금\", apl_dd: \"2020-03-31\", 4: \"2020-04-13\", 5: \"2019-10-01\", 6: \"\", 7: \"완료\" }\r\n  // ];\r\n  // 목록 조회\r\n  const getList = async () => {\r\n    try {\r\n      handleLoading(true);\r\n\r\n      // const params = {\r\n      //   menuId : 933,\r\n      //   id : 8,\r\n      //   bcIdx : 0,\r\n      //   page : 1,\r\n      //   // recordCountPerPage: 100,\r\n      //   categoryAllYn : 'Y'\r\n      // }\r\n      let searchParam;\r\n      let parmKeyword = '';\r\n\r\n      try {\r\n        // if (searchForm){\r\n        //   searchParam = searchForm.getFieldsValue();\r\n        // }\r\n       \r\n        let { keyword } = searchParam;\r\n        parmKeyword = (keyword === undefined) ? '' : keyword;\r\n      }\r\n      catch(err){\r\n\r\n      }\r\n      const wookList =form.getFieldsValue();\r\n      const params = 'gubun='+wookList.gubun+'&prsStatCd='+wookList.prsStatCd+'&searchEno='+wookList.searchEno;\r\n\r\n      const res =   await axios.post('./sampleGridList.do', params, axiosConfig)\r\n   \r\n      .then(res => res)\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        alert(error);\r\n      });\r\n\r\n      if (res) {       \r\n        const {resultList} = res.data;           \r\n     \r\n        // setGridData(boardList);\r\n        const data = resultList;\r\n        \r\n        \r\n        // if (data && data.length > 0) {\r\n        //   let no = 1;\r\n\r\n        //   data.map(_data => {\r\n        //     const _item = _data;\r\n        //     _item.no = no; // 번호\r\n        //     no += 1;\r\n        //     return _item;\r\n        //   });\r\n        // }\r\n\r\n        setGridData(data);\r\n\r\n        setIsStart(false);\r\n\r\n      }\r\n    } catch(e){\r\n      console.log(e);\r\n    }\r\n    finally{\r\n      handleLoading(false);\r\n    }\r\n  }\r\n  \r\n  const fileInfo = {\r\n    name: 'file',\r\n    multiple: true,\r\n    // action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\r\n    // onChange(info) {\r\n    //   const { status } = info.file;\r\n    //   if (status !== 'uploading') {\r\n    //     console.log(info.file, info.fileList);\r\n    //   }\r\n    //   if (status === 'done') {\r\n    //     message.success(`${info.file.name} file uploaded successfully.`);\r\n    //   } else if (status === 'error') {\r\n    //     message.error(`${info.file.name} file upload failed.`);\r\n    //   }\r\n    // },\r\n  };\r\n\r\n  const onChgDate = (date, dateString) => {\r\n    console.log(date, dateString);\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    console.log('handleSubmit');\r\n  }\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  useEffect(() => {\r\n     //getList();\r\n  }, []);\r\n\r\n  const viewDetail = async (listDtl) => { \r\n    \r\n    handleLoading(true);\r\n\r\n    const params =  'eno='+listDtl.eno+'&regSno='+listDtl.regSno;\r\n    \r\n    //const params = 'eno=' + listDtl.eno + '&regSno='+listDtl.regSno;\r\n    //const res = await axios.post('http://localhost:8080/poc/sampleGridDtl.do', params, axiosConfig)\r\n    const res = await axios.post('./sampleGridDtl.do',params, axiosConfig)\r\n    //const res = await axios.post(`http://tw.ubstory.co.kr/bbs/ajax/boardView.do`, params, axiosConfig)\r\n    if (res) {\r\n      const { resultList } = res.data;\r\n      // result.REMARK = result.REMARK      \r\n    \r\n    \r\n      form.setFieldsValue(resultList);\r\n      \r\n      handleLoading(false);\r\n      console.log('data ========>', resultList);\r\n    }\r\n\r\n    \r\n    \r\n  };\r\n\r\n  const inNumber = (event) =>  {\r\n    if(event.keyCode<48 || event.keyCode>57){\r\n      event.returnValue=false;\r\n   }\r\n\r\n  };\r\n\r\n  const initDtl = () =>  {\r\n    var today = new Date(),\r\n    date = today.getFullYear() +''+  ((today.getMonth() + 1) < 10 ? '0'+ (today.getMonth() + 1) : (today.getMonth() + 1))+ '' + today.getDate();\r\n\r\n    form.setFieldsValue({ftusTpCd          :'',\r\n    cncrDd            :'',\r\n    aplDd             :date,\r\n    wlfrAplPrgStatCd  :'',\r\n    txtReqWork        :'',\r\n    admtDd            :'',\r\n    txtTheme          :'',\r\n    chbirSpplPaymYn   :'',\r\n    chbirEptDd        :'',\r\n    chgChcrRsRsTxt    :'',\r\n    rnRsTxt           :'',\r\n    regSno            :'',\r\n    eno               :''});\r\n    \r\n  };\r\n  \r\n  const insertDtl = async () =>  {\r\n    handleLoading(true);\r\n\r\n    const params =  form.getFieldsValue();\r\n    \r\n    const param ='eno=20160097&regSno='+params.regSno+'&ftusTpCd='+params.ftusTpCd+'&cncrDd='+params.cncrDd+'&&admtDd='+params.admtDd+'&aplDd='+params.aplDd+'&wlfrAplPrgStatCd='+params.wlfrAplPrgStatCd+'&txtReqWork='+params.txtReqWork+'&chbirSpplPaymYn='+params.chbirSpplPaymYn+'&chbirEptDd='+params.chbirEptDd+'&chgChcrRsRsTxt='+params.chgChcrRsRsTxt+'&rnRsTxt='+params.rnRsTxt\r\n    \r\n    const res = await axios.post('./insertTbbjf118Dtl.do',param, axiosConfig)\r\n    //const res = await axios.post(`http://tw.ubstory.co.kr/bbs/ajax/boardView.do`, params, axiosConfig)\r\n    if (res) {\r\n      const { resultStat } = res.data;\r\n        //if(resultStat[0].status ==\"1\") {\r\n          alert(\"등록하였습니다\");\r\n        //}  \r\n          getList();\r\n    \r\n      //form.setFieldsValue(resultList);\r\n      \r\n      handleLoading(false);\r\n      console.log('data ========>', resultStat);\r\n      } \r\n\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Layout.Sider className=\"sider\" trigger={null} collapsible collapsed={collapsed}>\r\n        <h1 className=\"logo\">\r\n          <a href=\"#\"><i>s</i><span>SampleGrid</span></a>\r\n        </h1>\r\n        <h2 class=\"sr-only\">네비게이션</h2>\r\n        <Menu className=\"menu\" theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n          <Menu.Item key=\"5\">\r\n            <Link to=\"/sampleBoard\">\r\n              <Icon type=\"user\" />\r\n              <span>게시판</span>\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"6\">\r\n            <Link to=\"/sampleGrid\">\r\n              <Icon type=\"video-camera\" />\r\n              <span>출산장려금 신청목록</span>\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"7\">\r\n            <Link to=\"/sampleGrid2\">\r\n              <Icon type=\"video-camera\" />\r\n              <span>자격신고내역</span>\r\n            </Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Layout.Sider>\r\n      <Layout>\r\n        <Layout.Header class=\"header\">\r\n          <Icon \r\n            className=\"trigger\"\r\n            type={collapsed ? 'menu-unfold' : 'menu'}\r\n            // type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n            onClick={toggle}\r\n          />\r\n          <div className=\"etc-menu d-none d-lg-inline-block\">\r\n            <span>이 프로그램은 참고용으로 제작한 템플릿입니다.</span>\r\n          </div>\r\n        </Layout.Header>\r\n        <Layout.Content className=\"contents\">\r\n          <Form {...formItemLayout} className=\"search-form mb-35\">\r\n            <Row gutter={20} type=\"flex\">\r\n              <Col xs={20}>\r\n                <Row gutter={20}>\r\n                  <Col xs={24} md={8}>\r\n                    <Form.Item label=\"신청구분\">\r\n                      {getFieldDecorator('gubun', {\r\n                        rules: [{ required: false, message: '' }],\r\n                      })(\r\n                        <Select\r\n                          defaultValue=\"\"\r\n                          placeholder=\"전체\"\r\n                        >\r\n                          <Select.Option value=\"\">전체</Select.Option>\r\n                          <Select.Option value=\"1\">신규신청</Select.Option>\r\n                          <Select.Option value=\"2\">변경신청</Select.Option>                          \r\n                        </Select>,\r\n                      )}\r\n                    </Form.Item>\r\n                    </Col>\r\n                    <Col xs={24} md={8}>\r\n                      <Form.Item label=\"진행상태\">\r\n                        {getFieldDecorator('prsStatCd', {\r\n                          rules: [{ required: false, message: '' }],\r\n                        })(\r\n                          <Select\r\n                            defaultValue=\"\"\r\n                            placeholder=\"전체\"\r\n                          >\r\n                            <Select.Option value=\"\">전체</Select.Option>\r\n                            <Select.Option value=\"10\">저장</Select.Option>\r\n                            <Select.Option value=\"11\">신청</Select.Option>\r\n                            <Select.Option value=\"20\">승인</Select.Option>\r\n                            <Select.Option value=\"29\">반려</Select.Option>\r\n                          </Select>,\r\n                        )}\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col xs={24} md={8}>\r\n                      <Form.Item {...formItemLayout} label=\"성명\">\r\n                        {getFieldDecorator('searchEno', {\r\n                          rules: [\r\n                            {\r\n                              required: false,\r\n                              message: '',\r\n                            },\r\n                          ],\r\n                        })(\r\n                          <Row gutter={12}>\r\n                            <Col xs={10}>\r\n                              <Input.Search\r\n                                // placeholder=\"input search text\" \r\n                                defaultValue=\"\"\r\n                                onSearch={value => console.log(value)}\r\n                              />\r\n                            </Col>\r\n                            <Col xs={14}>\r\n                              <Input defaultValue=\"\" />\r\n                            </Col>\r\n                          </Row>\r\n                        )}\r\n                      </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col xs={4} className=\"text-right\">\r\n                <Button type=\"primary\" htmlType=\"submit\" className=\"mt-5\" onClick={getList}>\r\n                  조회\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n\r\n          <h3>출산장려지원금 신청 내역</h3>\r\n          <Spin spinning={false} isClass={false}>\r\n          <HIRAGrid\r\n            columns={columns}\r\n            rows={gridData}\r\n            // rowGetter={i => gridData[i]}\r\n            rowsCount={gridData.length}\r\n            minHeight={GRID_HEIGHT}           \r\n            onRowClick={onCellSelected}\r\n            enableCellAutoFocus={false}\r\n            emptyRowsView={isStart ? LoadingRowsView : EmptyRowsView}\r\n            onGridSort={(sortColumn, sortDirection) => setGridData(sortRows(gridData, sortColumn, sortDirection))}\r\n          />\r\n          </Spin>\r\n          <h3 className=\"mt-35\">출산장려지원금 신청</h3>\r\n          <Form {...formItemLayout} className=\"wrap-form\" >\r\n            <Row gutter={20}>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"신청구분\">\r\n                  {getFieldDecorator('ftusTpCd', {\r\n                    rules: [{ required: true, message: '' }],\r\n                  })(\r\n                    <Select\r\n                      defaultValue=\"\"\r\n                      placeholder=\"전체\"\r\n                    >\r\n                      <Select.Option value=\"\">전체</Select.Option>\r\n                      <Select.Option value=\"1\">신청</Select.Option>\r\n                      <Select.Option value=\"2\">변경</Select.Option>\r\n                      <Select.Option value=\"3\">해지</Select.Option>\r\n                      \r\n                    </Select>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n            \r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"신청일자\">\r\n                  {getFieldDecorator('aplDd', {\r\n                    rules: [{ required: true, message: '' }],\r\n                  })(\r\n                    //<DatePicker onChange={onChgDate} />,\r\n                    <Input defaultValue=\"\"/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"진행상태\">\r\n                  {getFieldDecorator('wlfrAplPrgStatCd', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Select\r\n                      defaultValue=\"1\"\r\n                      placeholder=\"전체\"\r\n                    >\r\n                      <Select.Option value=\"\">전체</Select.Option>\r\n                      <Select.Option value=\"10\">저장</Select.Option>\r\n                      <Select.Option value=\"11\">신청</Select.Option>\r\n                      <Select.Option value=\"20\">승인</Select.Option>\r\n                      <Select.Option value=\"29\">반려</Select.Option>\r\n                    </Select>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"해지일자\">\r\n                  {getFieldDecorator('cncrDd', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    //<DatePicker onChange={onChgDate} />,\r\n                    <Input defaultValue=\"\" />,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"승인일자\">\r\n                  {getFieldDecorator('admtDd', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    //<DatePicker onChange={onChgDate} />,\r\n                    <Input defaultValue=\"\" />,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"태아구분\">\r\n                  {getFieldDecorator('txtTheme', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Radio.Group>\r\n                      <Radio value=\"a\">일태아</Radio>\r\n                      <Radio value=\"b\">다태아</Radio>\r\n                    </Radio.Group>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={16}>\r\n                <Form.Item label=\"임산부 편의용품신청여부\" {...TwoItemLayout}>\r\n                  {getFieldDecorator('chbirSpplPaymYn', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Radio.Group>\r\n                      <Radio value=\"Y\">Y</Radio>\r\n                      <Radio value=\"N\">N</Radio>\r\n                    </Radio.Group>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"출산예정일\">\r\n                  {getFieldDecorator('chbirEptDd', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    //<DatePicker onChange={onChgDate} />,\r\n                    <Input defaultValue=\"\" />,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>             \r\n              <Col xs={24}>\r\n                <Form.Item label=\"변경 및 해지사유\" {...OneItemLayout} className=\"one-item\">\r\n                  {getFieldDecorator('chgChcrRsRsTxt', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input.TextArea placeholder=\"변경 및 해지사유를 입력해주세요.\" autoSize />,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24}>\r\n                <Form.Item label=\"반려사유\" {...OneItemLayout} className=\"one-item\">\r\n                  {getFieldDecorator('rnRsTxt', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input.TextArea placeholder=\"반려사유를 입력해주세요.\" autoSize />,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              \r\n              {/* <Col xs={24}>\r\n                <Form.Item label=\"첨부파일\" {...OneItemLayout} className=\"one-item\">\r\n                  {getFieldDecorator('txtFile', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Upload.Dragger {...fileInfo} className=\"d-block mt-5\">\r\n                      <p className=\"ant-upload-drag-icon\">\r\n                        <Icon type=\"inbox\" /> 파일을 마우스로 끌어놓으세요.\r\n                      </p>\r\n                      <p className=\"ant-upload-text\">제출서류 : 출산 전 진료비 지원 신청 및 임신확인서, 임신진단서 등</p>\r\n                      <p className=\"ant-upload-hint\">※ 위 서류를 스캔한 파일(pdf, jpg, bmp, hwp 형식)을 첨부하시기 바랍니다.</p>\r\n                    </Upload.Dragger>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col> */}\r\n              \r\n              <Col xs={24} className=\"text-right btn-area pt-20 pr-20\">\r\n              <Form.Item>{getFieldDecorator('regSno', { initialValue: '' })(<Input type=\"hidden\" />)}</Form.Item>\r\n              <Form.Item>{getFieldDecorator('eno', { initialValue: '' })(<Input type=\"hidden\" />)}</Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  승인요청\r\n                </Button>\r\n                <Button htmlType=\"submit\" onClick={initDtl}>\r\n                  등록\r\n                </Button>\r\n                <Button type=\"danger\" htmlType=\"submit\">\r\n                  삭제\r\n                </Button>\r\n                <Button type=\"primary\" htmlType=\"submit\"  onClick={insertDtl}>\r\n                  저장\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Layout.Content>\r\n        <Footer/>\r\n      </Layout>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default (Form.create()(GridSample));\r\n","import React, {useState, useEffect} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport axios from 'axios';\r\nimport { Layout, Row, Col, Menu, Icon, Form, Input, Select, Button, DatePicker, Radio, Upload, Spin,message } from 'antd';\r\n\r\nimport { MailOutlined, AlertTwoTone } from '@ant-design/icons';\r\nimport HIRAGrid from '../components/molecules/grid/HIRAGrid';\r\nimport SearchForm from '../components/molecules/form/SearchForm';\r\n\r\nimport Wrapper from '../components/templates/layout/layout';\r\nimport Footer from '../components/templates/layout/footer';\r\n\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\n\r\nconst GridSample2 = ({form}) => {\r\n  let grid; /* 그리드 선언 */  \r\n  const { getFieldDecorator } = form;\r\n  const GRID_HEIGHT = 440; /* 그리드 높이 */\r\n // 그리드 데이터 값\r\n const [gridData, setGridData] = useState([]);\r\n // 그리드 로딩\r\n const [gridLoading, setGridLoading] = useState(false);\r\n // 그리드 시작 여부 판단\r\n const [isStart, setIsStart] = useState(false);\r\n\r\n const [collapsed, setCollapsed] = useState(false);\r\n const [searchForm, setSearchForm] = useState({}); /** 검색폼 */\r\n const [gubun, setgubun] = useState(\"\");\r\n const [status, setstatus] = useState(\"\");\r\n const [username, setusername] = useState(\"\");\r\n\r\n const [no, setNo] = useState(\"\");\r\n const [relNm, setRelNm] = useState(\"\");\r\n const [famNm, setFamNm] = useState(\"\");\r\n const [aplTpNm, setAplTpNm] = useState(\"\");\r\n const [delDd, setDelDd] = useState(\"\");\r\n const [typeCode, setTypeCode] = useState(\"\");\r\n const [grd, setGrd] = useState(\"\");\r\n const [natNm, setNatNm] = useState(\"\");\r\n const [styAllowNm, setStyAllowNm] = useState(\"\");\r\n const [regDt, setRegDt] = useState(\"\");\r\n const [aplDt, setAplDt] = useState(\"\");\r\n const [styDt, setStyDt] = useState(\"\");\r\n const [prgStatNm, setPrgStatNm] = useState(\"\");\r\n \r\n\r\n\r\n  const { SubMenu } = Menu;\r\n  const formItemLayout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n    colon: false,\r\n  };\r\n  const OneItemLayout = {\r\n    labelCol: { span: 3 },\r\n    wrapperCol: { span: 21 },\r\n  };\r\n  const TwoItemLayout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 20 },\r\n  };\r\n\r\n  // 그리드 기본 프로퍼티스\r\n  const defaultColumnProperties = {\r\n    resizable: true\r\n  };\r\n  \r\n  // 그리드 ref 세팅\r\n  const handleSetGrid = ref => {\r\n    if (!grid) {\r\n      grid = ref;\r\n    }\r\n  };\r\n  const axiosConfig = {\r\n    headers: {\r\n      //'Content-Type': 'application/json charset=UTF-8'\r\n    }\r\n  };\r\n\r\n  // 그리드 데이터 없음 view\r\n  const EmptyRowsView = () => {\r\n    return (\r\n      <div style={{ textAlign: 'center', paddingTop: GRID_HEIGHT / 2 - 70 }}>\r\n        <div className=\"ant-empty ant-empty-normal\">\r\n          <div className=\"ant-empty-image\">\r\n            {/* <img src=\"../resource/img/img_nodata.svg\" alt='no data' /> */}\r\n          </div>\r\n          <p className=\"ant-empty-description\" style={{color:'#fff'}}>조회결과가 없습니다</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // 그리드 정렬\r\n  // eslint-disable-next-line consistent-return\r\n  const sortRows = (initialRows, sortColumn, sortDirection) => rows => {\r\n    try {\r\n      const comparer = (a, b) => {\r\n        if (sortDirection === 'ASC') {\r\n          return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n        }\r\n\r\n        if (sortDirection === 'DESC') {\r\n          return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n        }\r\n\r\n        return 1;\r\n      };\r\n      return sortDirection === 'NONE' ? initialRows : [...rows].sort(comparer);\r\n    } catch (err) {\r\n      // sendError(constants.KSD_ERROR.EV, err);\r\n    }\r\n  };\r\n  \r\n  // 그리드 cell 선택 이벤트\r\n  const onCellSelected = (rowIdx) => {\r\n    try {\r\n      // const rows = document.getElementsByClassName('react-grid-Row');\r\n      // rows.forEach(e => e.classList.remove('table-row-selected'));\r\n      // rows[rowIdx].classList.add('table-row-selected');\r\n\r\n      // setSecnCd(trim(gridData[rowIdx].secnCd));\r\n      viewDetail(gridData[rowIdx]);\r\n    }\r\n    catch(e){\r\n\r\n    }\r\n  };  \r\n\r\n  const columns = [\r\n    { key: 'no', name: 'No', width:80 },\r\n    { key: 'relNm', name: '관계', width:110 },\r\n    { key: 'famNm', name: '가족성명',  width:190 },    \r\n    { key: 'delDd', name: '취득(상실)일',  width:140 },\r\n    { key: 'typeCode', name: '종별부호',  width:120 },\r\n    { key: 'grd', name: '등급', width:110 },\r\n    { key: 'regDt', name: '등록일',  width:140 },\r\n    { key: 'natNm', name: '국적' ,  width:210},\r\n    { key: 'styAllowNm', name: '체류자격',  width:100},\r\n    { key: 'styDt', name: '체류기간', width:140 },\r\n    { key: 'aplDt', name: '신청일자', width:140 },\r\n    { key: 'prgStatNm', name: '진행상태', width:140 }\r\n    ].map(c => ({ ...c, ...defaultColumnProperties }));\r\n  \r\n  //  const rows = [\r\n  //    { : '', 1: \"3\", 2: \"부\", 3: \"홍길동\", 4: \"-\", 5: \"2019-10-01\", 6: 20012, 7: 5, 8: \"2013-02-05\", 9: \"독일\", 10: \"F-6-2\", 11: \"2022-02-22\", 12: \"2019-02-22\", 13: \"완료\" },\r\n  //    { id: 1, 1: \"3\", 2: \"부\", 3: \"홍길동\", 4: \"-\", 5: \"2019-10-01\", 6: 20012, 7: 5, 8: \"2013-02-05\", 9: \"독일\", 10: \"F-6-2\", 11: \"2022-02-22\", 12: \"2019-02-22\", 13: \"완료\" },\r\n  //    { id: 2, 1: \"3\", 2: \"부\", 3: \"홍길동\", 4: \"-\", 5: \"2019-10-01\", 6: 20012, 7: 5, 8: \"2013-02-05\", 9: \"독일\", 10: \"F-6-2\", 11: \"2022-02-22\", 12: \"2019-02-22\", 13: \"완료\" }\r\n  //    ];\r\n  \r\n  const fileInfo = {\r\n    name: 'file',\r\n    multiple: true,\r\n    // action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\r\n    // onChange(info) {\r\n    //   const { status } = info.file;\r\n    //   if (status !== 'uploading') {\r\n    //     console.log(info.file, info.fileList);\r\n    //   }\r\n    //   if (status === 'done') {\r\n    //     message.success(`${info.file.name} file uploaded successfully.`);\r\n    //   } else if (status === 'error') {\r\n    //     message.error(`${info.file.name} file upload failed.`);\r\n    //   }\r\n    // },\r\n  };\r\n\r\n  const onChgDate = (date, dateString) => {\r\n    console.log(date, dateString);\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    console.log('handleSubmit');\r\n  }\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  useEffect(() => {\r\n     //getList();     \r\n  }, []);\r\n// 그리드 로딩 view\r\nconst LoadingRowsView = () => {\r\n  return (\r\n    <div style={{ textAlign: 'center', paddingTop: GRID_HEIGHT / 2 - 40 }}>\r\n      <Spin spinning={gridLoading} isClass={false}>\r\n        {' '}\r\n      </Spin>\r\n    </div>\r\n  );\r\n};\r\n  \r\nconst rows = [{no : '', relNm : '', famNm: '', aplTpNm: '', delDd: '', typeCode: '', grd: '', natNm: '', styAllowNm: '', styDt: '', prgStatNm:'', regDt: '', aplDt: '' }];\r\n\r\nconst initForm = () =>{    \r\n  viewDetail(rows[0]);\r\n  setNo(\"\");\r\n  setRelNm(\"\");\r\n  setFamNm(\"\");\r\n  setAplTpNm(\"\");\r\n  setDelDd(\"\");\r\n  setTypeCode(\"\");\r\n  setGrd(\"\");\r\n  setNatNm(\"\");\r\n  setStyAllowNm(\"\");\r\n  setRegDt(\"\");\r\n  setAplDt(\"\");\r\n  setStyDt(\"\");\r\n  setPrgStatNm(\"\");\r\n};\r\n// 목록 조회\r\n  const getList = async () => {\r\n    try {\r\n      handleLoading(true);\r\n\r\n      let searchParam;\r\n      let parmKeyword = '';\r\n\r\n      try {\r\n        // if (searchForm){search-form mb-35\r\n        //   searchParam = searchForm.getFieldsValue();\r\n        // }\r\n\r\n        let { keyword } = searchParam;\r\n        parmKeyword = (keyword === undefined) ? '' : keyword;\r\n      }\r\n      catch(err){\r\n\r\n      }\r\n      //alert(Form.getfieldVelue('gubun'));\r\n    \r\n      const params = 'gubun='+gubun+'&status='+status+'&username='+username;      \r\n\r\n      const res = await axios.post('<div className=\"\"></div>/singoList.do', params, axiosConfig)      \r\n      .then(res => res)\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n      if (res) {\r\n        const {resultList} = res.data;        \r\n        const data = resultList;\r\n    \r\n        setGridData(data);\r\n        setIsStart(false);        \r\n      }\r\n    } catch(e){\r\n      console.log(e);\r\n    }\r\n    finally{\r\n      handleLoading(false);\r\n    }\r\n  }\r\n\r\n\r\n  const setData = async () => {\r\n    try {\r\n      handleLoading(true);      \r\n    \r\n      const params = 'no='+no+'&relNm='+relNm+'&famNm='+famNm+'&aplTpNm='+aplTpNm+'&delDd='+delDd+'&typeCode='+typeCode+'&grd='+grd+'&regDt='+regDt+'&natNm='+natNm+'&styAllowNm='+styAllowNm+'&styDt='+styDt+'&aplDt='+aplDt+'&prgStatNm='+prgStatNm;\r\n      \r\n      //alert(params);\r\n\r\n      const res = await axios.post('./singoSave.do', params, axiosConfig)      \r\n      .then(res => res)\r\n       .catch(function (error) {\r\n         console.log(error);\r\n       });\r\n\r\n      getList();\r\n\r\n    } catch(e){\r\n      console.log(e);\r\n    }\r\n    finally{\r\n      handleLoading(false);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // 그리드 및 버튼 로딩 제어\r\n  const handleLoading = isLoading => {\r\n    setGridLoading(isLoading);\r\n    // setBtnSearchLoading(isLoading);\r\n  };\r\n\r\n  const viewDetail = async (dataMap) => {\r\n    handleLoading(true);\r\n\r\n    if (dataMap) {     \r\n      form.setFieldsValue(dataMap);\r\n      handleLoading(false);\r\n\r\n      //alert(dataMap.no);\r\n\r\n       setNo(dataMap.no);\r\n       setRelNm(dataMap.relNm);\r\n       setFamNm(dataMap.famNm);\r\n       setAplTpNm(dataMap.aplTpNm);\r\n       setDelDd(dataMap.delDd);\r\n       setTypeCode(dataMap.typeCode);\r\n       setGrd(dataMap.grd);\r\n       setNatNm(dataMap.natNm);\r\n       setStyAllowNm(dataMap.styAllowNm);\r\n       setRegDt(dataMap.regDt);\r\n       setAplDt(dataMap.aplDt);\r\n       setStyDt(dataMap.styDt);\r\n       setPrgStatNm(dataMap.prgStatNm);\r\n      console.log('data ========>', dataMap);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <Wrapper>\r\n      <Layout.Sider className=\"sider\" trigger={null} collapsible collapsed={collapsed}>\r\n        <h1 className=\"logo\">\r\n          <a href=\"#\"><i>s</i><span>SampleGrid</span></a>\r\n        </h1>\r\n        <h2 class=\"sr-only\">네비게이션</h2>\r\n        <Menu className=\"menu\" theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n          <Menu.Item key=\"5\">\r\n            <Link to=\"./sampleBoard\">\r\n              <Icon type=\"user\" />\r\n              <span>클라우드 POC</span>\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"6\">\r\n            <Link to=\"./sampleGrid\">\r\n              <Icon type=\"video-camera\" />\r\n              <span>출산장려금 신청목록</span>\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"7\">\r\n            <Link to=\"./sampleGrid2\">\r\n              <Icon type=\"video-camera\" />\r\n              <span>자격신고내역</span>\r\n            </Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Layout.Sider>\r\n      <Layout>\r\n        <Layout.Header class=\"header\">\r\n          <Icon \r\n            className=\"trigger\"\r\n            type={collapsed ? 'menu-unfold' : 'menu'}\r\n            // type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n            onClick={toggle}\r\n          />\r\n          <div className=\"etc-menu d-none d-lg-inline-block\">\r\n            <span>이 프로그램은 참고용으로 제작한 템플릿입니다.</span>\r\n          </div>\r\n        </Layout.Header>\r\n        <Layout.Content className=\"contents\">\r\n        \r\n          <Form {...formItemLayout} className=\"search-form mb-35\">\r\n            <Row gutter={20} type=\"flex\">\r\n              <Col xs={20}>\r\n                <Row gutter={20}>\r\n                  <Col xs={24} md={8}>\r\n                    <Form.Item label=\"신청구분\">\r\n                      {getFieldDecorator('gubun', {\r\n                        rules: [{ required: false, message: '' }],\r\n                      })(\r\n                        <Input type=\"gubun\" name=\"gubun\" value={gubun} onChange={e => setgubun(e.target.value)}/>\r\n                        /*<Select\r\n                          defaultValue=\"전체\"\r\n                          placeholder=\"전체\"\r\n                          type=\"gubun\" name=\"gubun\" value={gubun} onChange={e => setgubun(e.target.value)}\r\n                        >\r\n                          <Select.Option value=\"전체\">전체</Select.Option>\r\n                          <Select.Option value=\"접수\">접수</Select.Option>\r\n                          <Select.Option value=\"진행중\">진행중</Select.Option>\r\n                          <Select.Option value=\"완료\">완료</Select.Option>\r\n                        </Select>,*/\r\n                      )}\r\n                    </Form.Item>\r\n                    </Col>\r\n                    <Col xs={24} md={8}>\r\n                      <Form.Item label=\"진행상태\">\r\n                        {getFieldDecorator('status', {\r\n                          rules: [{ required: false, message: '' }],\r\n                        })(\r\n                          <Input type=\"status\" name=\"status\" value={status} onChange={e => setstatus(e.target.value)}/>\r\n                          /*<Select                            \r\n                            defaultValue=\"전체\"\r\n                            placeholder=\"전체\"                                                       \r\n                            type=\"status\" name=\"status\" value={status} onChange={e => setstatus(e.target.value)}\r\n                          >\r\n                            <Select.Option value=\"전체\">전체</Select.Option>\r\n                            <Select.Option value=\"접수\">접수</Select.Option>\r\n                            <Select.Option value=\"진행중\">진행중</Select.Option>\r\n                            <Select.Option value=\"완료\">완료</Select.Option>\r\n                          </Select>,*/\r\n                        )}\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col xs={24} md={8}>\r\n                      <Form.Item {...formItemLayout} label=\"성명\">\r\n                        {getFieldDecorator('username', {\r\n                          rules: [\r\n                            {\r\n                              required: false,\r\n                              message: '',\r\n                            },\r\n                          ],\r\n                        })(\r\n                          <Row gutter={12}>                        \r\n                              <Input type=\"username\" name=\"username\" value={username} onChange={e => setusername(e.target.value)}/>\r\n                          </Row>\r\n                        )}\r\n                      </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col xs={4} className=\"text-right\">\r\n                <Button type=\"primary\" htmlType=\"submit\" className=\"mt-5\" onClick={getList}>\r\n                  조회\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n\r\n          <h3>직장피부양자 자격신고 내역</h3>\r\n          <HIRAGrid\r\n           columns={columns}\r\n           rows={gridData}\r\n           //rowGetter={i => gridData[i]}\r\n           rowsCount={gridData.length}\r\n           minHeight={GRID_HEIGHT}\r\n           onRowClick={onCellSelected}\r\n           enableCellAutoFocus={false}\r\n           emptyRowsView={isStart ? LoadingRowsView : EmptyRowsView}\r\n           onGridSort={(sortColumn, sortDirection) => setGridData(sortRows(gridData, sortColumn, sortDirection))}\r\n          />\r\n\r\n          <h3 className=\"mt-35\">직장피부양자 자격신고</h3>\r\n          <Form {...formItemLayout} className=\"wrap-form\">\r\n            <Row gutter={20}>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"관계\">\r\n                  {getFieldDecorator('relNm', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"relNm\" name=\"relNm\" value={relNm} onChange={e => setRelNm(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"가족성명\">\r\n                  {getFieldDecorator('famNm', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"famNm\" name=\"famNm\" value={famNm} onChange={e => setFamNm(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"신청구분\">\r\n                  {getFieldDecorator('aplTpNm', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"aplTpNm\" name=\"aplTpNm\" value={aplTpNm} onChange={e => setAplTpNm(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"취득(상실)일\">                  \r\n                  {getFieldDecorator('delDd', {\r\n                    rules: [{ required: true, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"delDd\" name=\"delDd\" value={delDd} onChange={e => setDelDd(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"종별부호\">\r\n                  {getFieldDecorator('typeCode', {\r\n                    rules: [{ required: true, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"typeCode\" name=\"typeCode\" value={typeCode} onChange={e => setTypeCode(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"등급\">\r\n                  {getFieldDecorator('grd', {\r\n                    rules: [{ required: true, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"grd\" name=\"grd\" value={grd} onChange={e => setGrd(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"국적\">\r\n                  {getFieldDecorator('natNm', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"natNm\" name=\"natNm\" value={natNm} onChange={e => setNatNm(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"체류자격\">\r\n                  {getFieldDecorator('styAllowNm', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"styAllowNm\" name=\"styAllowNm\" value={styAllowNm} onChange={e => setStyAllowNm(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"체류기한\">\r\n                  {getFieldDecorator('styDt', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"styDt\" name=\"styDt\" value={styDt} onChange={e => setStyDt(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"등록일\">\r\n                  {getFieldDecorator('regDt', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"regDt\" name=\"regDt\" value={regDt} onChange={e => setRegDt(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"신청일자\">\r\n                  {getFieldDecorator('aplDt', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"aplDt\" name=\"aplDt\" value={aplDt} onChange={e => setAplDt(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} md={8}>\r\n                <Form.Item label=\"진행상태\">\r\n                  {getFieldDecorator('prgStatNm', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Input defaultValue=\"\" type=\"prgStatNm\" name=\"prgStatNm\" value={prgStatNm} onChange={e => setPrgStatNm(e.target.value)}/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col> \r\n              {/* <Col xs={24}>\r\n                <Form.Item label=\"첨부파일\" {...OneItemLayout} className=\"one-item\">\r\n                  {getFieldDecorator('filenifo', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <Upload.Dragger className=\"d-block mt-5\">\r\n                      <p className=\"ant-upload-drag-icon\">\r\n                        <Icon type=\"inbox\" /> 파일을 마우스로 끌어놓으세요.\r\n                      </p>\r\n                      <p className=\"ant-upload-hint\">※ 가족관계증명서 필수 첨부(주민등록번호 전체 표시)</p>\r\n                    </Upload.Dragger>,\r\n                  )}\r\n                </Form.Item>\r\n              </Col> */}\r\n              <Col xs={24} className=\"text-right btn-area pt-20 pr-20\">\r\n                {/* <Button type=\"primary\" htmlType=\"submit\">\r\n                  승인요청\r\n                </Button>                 */}\r\n                <Button htmlType=\"submit\" type=\"add\" onClick={initForm}>\r\n                  등록\r\n                </Button>\r\n                {/* <Button type=\"danger\" htmlType=\"submit\" onClick={}>\r\n                  삭제\r\n                </Button> */}\r\n                <Button type=\"primary\" htmlType=\"submit\" onClick={setData}>\r\n                  저장\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Layout.Content>\r\n        <Footer/>\r\n      </Layout>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default (Form.create()(GridSample2));\r\n","import React, {useState, useEffect} from 'react';\r\n\r\nimport { Row, Col, Form, Input, Button } from 'antd';\r\n\r\nconst SearchForm = ({ form, setTransForm, searchBtnClick }) => {\r\n  const { getFieldDecorator } = form;\r\n  const [isTransCheck, setIsTransCheck] = useState(true); /* 부모창으로 form Data 넘길때 체크 */\r\n\r\n  const formItemLayout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n    colon: false,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isTransCheck) {\r\n      setTransForm(form);\r\n      setIsTransCheck(false);\r\n    }\r\n  }, [isTransCheck, setTransForm]);\r\n\r\n  return (\r\n    <Form {...formItemLayout} className=\"search-form mb-35\">\r\n      <Row gutter={20} type=\"flex\">\r\n        <Col xs={24}>\r\n          <Row gutter={20}>\r\n            <Col xs={14}>\r\n            </Col>\r\n            <Col xs={8} className=\"text-right\">\r\n              <Form.Item {...formItemLayout} label=\"제목\">\r\n                {getFieldDecorator('keyword', {\r\n                  rules: [\r\n                    {\r\n                      required: false,\r\n                      message: '',\r\n                    },\r\n                  ],\r\n                })(\r\n                  <Input\r\n                    defaultValue={''}\r\n                    value={''}\r\n                    onPressEnter={searchBtnClick}\r\n                  />\r\n                )}\r\n              </Form.Item>\r\n            </Col>\r\n            <Col xs={2} className=\"text-right\">\r\n              <Button type=\"primary\" htmlType=\"submit\" className=\"mt-5\" onClick={searchBtnClick}>\r\n                조회\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default Form.create()(SearchForm);\r\n","import React, {useState, useEffect} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport axios from 'axios';\r\nimport { Layout, Row, Col, Menu, Icon, Form, Input, Select, Button, DatePicker, Radio, Upload, Spin, message } from 'antd';\r\nimport { MailOutlined } from '@ant-design/icons';\r\n\r\nimport SearchForm from '../components/molecules/form/SearchForm';\r\nimport HIRAGrid from '../components/molecules/grid/HIRAGrid';\r\n// impor addons from 'react-data-grid-addons';\r\nimport Wrapper from '../components/templates/layout/layout';\r\nimport Footer from '../components/templates/layout/footer';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\n\r\nconst BoardSample = ({form}) => {\r\n  let grid; /* 그리드 선언 */\r\n  const GRID_HEIGHT = 296; /* 그리드 높이 */\r\n  // 그리드 기본 프로퍼티스\r\n  const defaultColumnProperties = {\r\n    resizable: true\r\n  };\r\n\r\n  // 그리드 데이터 값\r\n  const [gridData, setGridData] = useState([]);\r\n  // 그리드 로딩\r\n  const [gridLoading, setGridLoading] = useState(false);\r\n  // 그리드 시작 여부 판단\r\n  const [isStart, setIsStart] = useState(false);\r\n\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const [searchForm, setSearchForm] = useState({}); /** 검색폼 */\r\n\r\n  const { getFieldDecorator } = form;\r\n  const { SubMenu } = Menu;\r\n  const { TextArea } = Input;\r\n\r\n  const formItemLayout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n    colon: false,\r\n  };\r\n  const OneItemLayout = {\r\n    labelCol: { span: 3 },\r\n    wrapperCol: { span: 21 },\r\n  };\r\n  const TwoItemLayout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 20 },\r\n  };\r\n\r\n  const axiosConfig = {\r\n    headers: {\r\n      'Content-Type': 'application/json charset=UTF-8'\r\n    }\r\n  };\r\n\r\n  // 그리드 로딩 view\r\n  const LoadingRowsView = () => {\r\n    return (\r\n      <div style={{ textAlign: 'center', paddingTop: GRID_HEIGHT / 2 - 40 }}>\r\n        <Spin spinning={gridLoading} isClass={false}>\r\n          {' '}\r\n        </Spin>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // 그리드 데이터 없음 view\r\n  const EmptyRowsView = () => {\r\n    return (\r\n      <div style={{ textAlign: 'center', paddingTop: GRID_HEIGHT / 2 - 70 }}>\r\n        <div className=\"ant-empty ant-empty-normal\">\r\n          <div className=\"ant-empty-image\">\r\n            {/* <img src=\"../resource/img/img_nodata.svg\" alt='no data' /> */}\r\n          </div>\r\n          <p className=\"ant-empty-description\" style={{color:'#fff'}}>no data</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // 그리드 정렬\r\n  // eslint-disable-next-line consistent-return\r\n  const sortRows = (initialRows, sortColumn, sortDirection) => rows => {\r\n    try {\r\n      const comparer = (a, b) => {\r\n        if (sortDirection === 'ASC') {\r\n          return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n        }\r\n\r\n        if (sortDirection === 'DESC') {\r\n          return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n        }\r\n\r\n        return 1;\r\n      };\r\n      return sortDirection === 'NONE' ? initialRows : [...rows].sort(comparer);\r\n    } catch (err) {\r\n      // sendError(constants.KSD_ERROR.EV, err);\r\n    }\r\n  };\r\n  \r\n  // 그리드 cell 선택 이벤트\r\n  const onCellSelected = (rowIdx) => {\r\n    try {\r\n      // const rows = document.getElementsByClassName('react-grid-Row');\r\n      // rows.forEach(e => e.classList.remove('table-row-selected'));\r\n      // rows[rowIdx].classList.add('table-row-selected');\r\n\r\n      // setSecnCd(trim(gridData[rowIdx].secnCd));\r\n      viewDetail(gridData[rowIdx].B_IDX);\r\n    }\r\n    catch(e){\r\n\r\n    }\r\n  };\r\n\r\n  // 그리드 및 버튼 로딩 제어\r\n  const handleLoading = isLoading => {\r\n    setGridLoading(isLoading);\r\n    // setBtnSearchLoading(isLoading);\r\n  };\r\n\r\n  const columns = [\r\n    { \r\n      key: 'no', \r\n      name: 'no', \r\n      formatter: cell => {\r\n        return <p className=\"text-center\">{`${cell.row.no}`}</p>;\r\n      },\r\n      width:100\r\n    },\r\n    { \r\n      key: 'B_IDX', \r\n      name: 'B_IDX', \r\n      width:0\r\n    },\r\n    {\r\n      key: 'relNm', \r\n      name: '제목',\r\n      width: '50%'\r\n    },\r\n    { \r\n      key: 'famNm', \r\n      name: '작성자 ',\r\n      formatter: cell => {\r\n        return <p className=\"text-center\">{`${cell.row.famNm}`}</p>;\r\n      },\r\n      width:200\r\n    },\r\n    { \r\n      key: 'regDt', \r\n      name: '작성일자',\r\n      formatter: cell => {\r\n        return <p className=\"text-center\">{`${cell.row.regDt}`}</p>;\r\n      },\r\n      width:150\r\n    }\r\n  ].map(c => ({ ...c, ...defaultColumnProperties }));\r\n\r\n  // 목록 조회\r\n  const getList = async () => {\r\n    try {\r\n      handleLoading(true);\r\n\r\n      // const params = {\r\n      //   menuId : 933,\r\n      //   id : 8,\r\n      //   bcIdx : 0,\r\n      //   page : 1,\r\n      //   // recordCountPerPage: 100,\r\n      //   categoryAllYn : 'Y'\r\n      // }\r\n      let searchParam;\r\n      let parmKeyword = '';\r\n\r\n      try {\r\n        if (searchForm){\r\n          searchParam = searchForm.getFieldsValue();\r\n        }\r\n\r\n        let { keyword } = searchParam;\r\n        parmKeyword = (keyword === undefined) ? '' : keyword;\r\n      }\r\n      catch(err){\r\n\r\n      }\r\n\r\n      const params = 'menuId=933&bsIdx=8&page=1&bcIdx=0&searchCondition=SUBJECT&searchKeyword=' + parmKeyword + '&categoryAllYn=Y';\r\n\r\n      //const res = await axios.post('http://tw.ubstory.co.kr/bbs/ajax/boardList.do', params, axiosConfig)\r\n      //const res = await axios.post('http://localhost:8080/poc/singoList.do', {params:{aa:'1',bb:'2'}}, axiosConfig)\r\n      const res = await axios.post('http://localhost:8080/poc/singoList.do', '', axiosConfig)\r\n      // const res = await axios.post('http://eplatapi.ubstory.co.kr:8080/bbs/ajax/boardListTest.do', form, axiosConfig)\r\n      .then(res => res)\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n      if (res) {\r\n        const {resultList} = res.data;\r\n        //setGridData(boardList);\r\n        const data = resultList;\r\n\r\n        //alert(data);\r\n        \r\n        // if (data && data.length > 0) {\r\n        //   let no = 1;\r\n\r\n        //   data.map(_data => {\r\n        //     const _item = _data;\r\n        //     _item.no = no; // 번호\r\n        //     no += 1;\r\n        //     return _item;\r\n        //   });\r\n        // }\r\n\r\n        setGridData(data);\r\n\r\n        setIsStart(false);\r\n\r\n      }\r\n    } catch(e){\r\n      console.log(e);\r\n    }\r\n    finally{\r\n      handleLoading(false);\r\n    }\r\n  }\r\n\r\n  // 상세 조회\r\n  const viewDetail = async (boardIdx) => {\r\n    handleLoading(true);\r\n\r\n    const params = 'bsIdx=8&bIdx=' + boardIdx + '&menuId=100';\r\n    const res = await axios.post(`http://tw.ubstory.co.kr/bbs/ajax/boardView.do`, params, axiosConfig)\r\n    if (res) {\r\n      const { result } = res.data;\r\n      // result.REMARK = result.REMARK\r\n      form.setFieldsValue(result);\r\n      handleLoading(false);\r\n      console.log('data ========>', result);\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const body = form.getFieldsValue();\r\n      \r\n\r\n      const params = 'menuId=933&bsIdx=8&gno=0&page=1&NOTICE_YN=N&SDATE=&EDATE=&fileIdx=&imgStr=&WRITER=최고관리자' +\r\n                      '&bIdx=' + body.B_IDX + \r\n                      '&SUBJECT=' + body.SUBJECT + \r\n                      '&REMARK=' + body.REMARK;\r\n\r\n      const aConfig = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data;'\r\n        }\r\n      };\r\n    \r\n      const res = await axios.post('http://tw.ubstory.co.kr/bbs/boardWriteProc.do', params, axiosConfig)\r\n      .then(res => res)\r\n      .catch(function (error) {\r\n          console.log(error);\r\n      });\r\n\r\n      if (res) {\r\n        getList();\r\n      }\r\n    }\r\n    catch(err){\r\n\r\n    }\r\n  }\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getList();\r\n  }, []);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Layout.Sider className=\"sider\" trigger={null} collapsible collapsed={collapsed}>\r\n        <h1 className=\"logo\">\r\n          <a href=\"#\"><i>s</i><span>SampleGrid</span></a>\r\n        </h1>\r\n        <h2 className=\"sr-only\">네비게이션</h2>\r\n        <Menu className=\"menu\" theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n          <Menu.Item key=\"5\">\r\n            <Link to=\"/sampleBoard\">\r\n              <Icon type=\"user\" />\r\n              <span>클라우드 POC</span>\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"6\">\r\n            <Link to=\"/sampleGrid\">\r\n              <Icon type=\"video-camera\" />\r\n              <span>출산장려금 신청목록</span>\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"7\">\r\n            <Link to=\"/sampleGrid2\">\r\n              <Icon type=\"video-camera\" />\r\n              <span>자격신고내역</span>\r\n            </Link>\r\n          </Menu.Item>\r\n          {/* <Menu.Item key=\"7\">\r\n            <Icon type=\"upload\" />\r\n            <span>nav 3</span>\r\n          </Menu.Item>\r\n          <SubMenu\r\n            key=\"sub1\"\r\n            title={\r\n              <span>\r\n                <MailOutlined />\r\n                <span>Sub Menu</span>\r\n              </span>\r\n            }\r\n          >\r\n            <Menu.Item key=\"1\">Option 1</Menu.Item>\r\n            <Menu.Item key=\"2\">Option 2</Menu.Item>\r\n          </SubMenu> */}\r\n        </Menu>\r\n      </Layout.Sider>\r\n      <Layout>\r\n        <Layout.Header class=\"header\">\r\n          <Icon \r\n            className=\"trigger\"\r\n            type={collapsed ? 'menu-unfold' : 'menu'}\r\n            // type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n            onClick={toggle}\r\n          />\r\n          <div className=\"etc-menu d-none d-lg-inline-block\">\r\n            <span>이 프로그램은 참고용으로 제작한 템플릿입니다.</span>\r\n          </div>\r\n        </Layout.Header>\r\n        <Layout.Content className=\"contents\">\r\n        <br/><br/><br/><br/><br/>\r\n        <br/><br/><br/><br/><br/>\r\n        <br/><br/><br/><br/><br/>\r\n        <br/><br/><br/><br/><br/>\r\n        <br/><br/><br/><br/><br/>\r\n        <br/><br/><br/><br/><br/>\r\n        <br/><br/><br/><br/><br/>\r\n        <br/><br/><br/>\r\n        \r\n          {/* <SearchForm setTransForm={form => setSearchForm(form)} searchBtnClick={getList} />\r\n          <h3>게시판 목록</h3>\r\n          <Spin spinning={false} isClass={false}>\r\n          <HIRAGrid\r\n            columns={columns}\r\n            rows={gridData}\r\n            // rowGetter={i => gridData[i]}\r\n            rowsCount={gridData.length}\r\n            minHeight={GRID_HEIGHT}\r\n            onRowClick={onCellSelected}\r\n            enableCellAutoFocus={false}\r\n            emptyRowsView={isStart ? LoadingRowsView : EmptyRowsView}\r\n            onGridSort={(sortColumn, sortDirection) => setGridData(sortRows(gridData, sortColumn, sortDirection))}\r\n          />\r\n          </Spin>\r\n\r\n          <h3 className=\"mt-35\">게시판 상세</h3>\r\n          <Spin spinning={gridLoading} isClass={false}>\r\n          <Form {...formItemLayout} className=\"wrap-form\">\r\n            <Row gutter={20}>\r\n              <Col xs={24}>\r\n                <Form.Item label=\"제목\">\r\n                  {getFieldDecorator('SUBJECT', {\r\n                    rules: [{ required: true, message: '' }],\r\n                  })(\r\n                    <Input placeholder='제목을 입력하세요.' maxLength={50} />\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24}>\r\n                <Form.Item label=\"내용\">\r\n                  {getFieldDecorator('REMARK', {\r\n                    rules: [{ required: false, message: '' }],\r\n                  })(\r\n                    <TextArea rows={5} />,\r\n                  )}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} className=\"text-right btn-area pt-20 pr-20\">\r\n                <Form.Item>{getFieldDecorator('B_IDX', { initialValue: '' })(<Input type=\"hidden\" />)}</Form.Item>\r\n                <Button htmlType=\"submit\">\r\n                  신규등록\r\n                </Button>\r\n                <Button type=\"danger\" htmlType=\"submit\">\r\n                  삭제\r\n                </Button>\r\n                <Button type=\"primary\" htmlType=\"submit\" onClick={handleSubmit}>\r\n                  저장\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n          </Spin> */}\r\n        </Layout.Content>\r\n        <Footer/>\r\n      </Layout>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default (Form.create()(BoardSample));\r\n","// Components/Routes.js\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport sampleGrid from \"./pages/sampleGrid\";\r\nimport sampleGrid2 from \"./pages/sampleGrid2\";\r\nimport sampleBoard from \"./pages/sampleBoard\";\r\n\r\nexport default () => (\r\n  <Router>\r\n    <Route exact path=\"/\" component={sampleGrid2} />\r\n    <Route path=\"/sampleBoard\" component={sampleBoard} />\r\n    <Route path=\"/sampleGrid\" component={sampleGrid} />\r\n    <Route path=\"/sampleGrid2\" component={sampleGrid2} />\r\n  </Router>\r\n)\r\n","import React, { Component } from 'react';\r\n// import GridSample from './pages/sampleGrid';\r\nimport Routes from \"./Routes\";\r\n\r\nimport './resource/common.scss';\r\nimport 'antd/dist/antd.css';\r\nimport './resource/DefaultLayout.scss';\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n      <>\r\n        <Routes />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}